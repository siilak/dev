<?php namespace ProcessWire;

/**
 * ProcessWire Modules (plural) Fieldtype
 *
 * Field that stores reference to one or more other modules. 
 *
 * This is similar to FieldtypeModule except that it stores multiple modules.
 * It uses asmSelect to make the selection sortable/searchable.
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FieldtypePadDownloads extends FieldtypeMulti {

  public static function getModuleInfo() {
    return array(
      'title' => 'Downloads Reference (multiple)',
      'version' => 100,
      'summary' => 'Field that stores a reference to one or more downloadable file.',
      'permanent' => false,
      'requires' => array("PadDownloads")
      );
  }

  public function getBlankValue(Page $page, Field $field) {
    return array();
  }

  public function sanitizeValue(Page $page, Field $field, $value) {

    if(!$value) return array();
    if(!is_array($value)) $value = array($value); 

    foreach($value as $k => $v) {
      // we allow integers
      if(is_int($v)) continue; 

      // but we don't allow anything else
      unset($value[$k]); 
    }

    return $value; 
  }

  public function ___markupValue(Page $page, Field $field, $value = null, $property = '') {
  	$out = "<ul>";
  	foreach ($value as $download) {
  		$out .= "<li>" . $download->title . " (" . $download->name . ")</li>";
  	}
  	$out .= "</ul>";
  	return $out;
  }

  public function ___wakeupValue(Page $page, Field $field, $value) {

    $v = $this->getBlankValue($page, $field);

    if(empty($value)) return $v; 

    foreach($value as $downloadID) {
      $v[] = (int) $downloadID; 
    } 

    return $v; 
  }

  public function ___sleepValue(Page $page, Field $field, $value) {

    $a = array();

    foreach($value as $id) {
      if(is_int($id)) $a[] = $id; 
    }

    return $a; 
  }

  /**
   * Instantiate the modules 
   *
   * This method is only used when $page->outputFormatting is true. 
   *
   */
  public function ___formatValue(Page $page, Field $field, $value) {

    foreach($value as $k => $v) {
      if(!is_int($v)) continue; 
      $download = $this->modules->get("PadDownloads")->getDownload($v); 
      if($download) {
        $value[$k] = $download; 
      } else {
        unset($value[$k]); 
      }
    }

    return $value; 
  }

  public function getInputfield(Page $page, Field $field) {

    $inputfield = $this->modules->get('InputfieldAsmSelect'); 
    $inputfield->attr('name', $field->name); 

    $downloads = $this->modules->get("PadDownloads")->getDownloads();

    foreach($downloads as $download) {
      $inputfield->addOption($download->id, $download->title); 
    }
    $inputfield->attr('value', array()); 

    return $inputfield; 
  }

  public function getDatabaseSchema(Field $field) {
    $schema = parent::getDatabaseSchema($field); 
    $schema['data'] = 'int NOT NULL';
    $schema['keys']['data'] = 'KEY data (data, pages_id, sort)';
    return $schema;
  }

  public function ___getCompatibleFieldtypes(Field $field) {
    $fieldtypes = new Fieldtypes();
    return $fieldtypes;
  }

  public function ___getConfigInputfields(Field $field) {

    $inputfields = parent::___getConfigInputfields($field); 
    return $inputfields;      
  }

}